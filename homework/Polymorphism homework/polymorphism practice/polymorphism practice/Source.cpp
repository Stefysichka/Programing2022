#include <iostream>
#include <vector>
#include <fstream>
#include <algorithm>
using namespace std;
/*????????? ??????? ???? «????????»( ?????, ?????) ?? ??????? ??? ????? ?????  
«???????»(??????, ?????) ?? «??????????» (????????). 
? ?????????? ????? ?????? ???? ??? 5 ??????????. ??????? ?? ???? ? ?????
? ??????????? ? ????????? ???? ?????? ???? ??????????, ???????????? ?? ???????. 
????? ?? ???????? ??????? ??????? ??? ???? ???????, ?????????? ????????? ????????? ??????????
*/
class Exhibit {
protected:
	string name;
	string author;
public:
	virtual void input(istream& is) {
		is >> name >> author;
	}
	virtual void output(ostream& os) {
		os << "Name: " << name << "\n Author: " << author;
	}
	virtual string GetAuthor() const {
		return author;
	}
	bool operator<(const Exhibit& other) const {
		return author < other.GetAuthor();
	}
};
class Picture: public Exhibit {
private:
	double size;
	string style;
public:
	void input(istream& is) {
		Exhibit::input(is);
		is >> size >> style;
	}
	void output(ostream& os) {
		Exhibit::output(os);
		os << "\n size: " << size << "\n style: " << style;
	}
	string GetAuthor() {
		return author;
	}

};
class Sculpture: public Exhibit {
private:
	string material;
public:
	void input(istream& is) {
		Exhibit::input(is);
		is >> material;
	}
	void output(ostream& os) {
		Exhibit::output(os);
		os << "\n material: " << material;
	}
     string GetAuthor() {
		return author;
	}
	 string getMaterial() {
		 return material;
	 }
};
int main() {
	vector<Exhibit*>list;
	ifstream file1("Text1.txt");
	string name;
	string author;
	double size;
	string style;
	string material;
	/*1.??????? ?? ???? ? ?????*/
	while (file1 >> name >> author >> size >> style >> material) {
		if (style != "-") {
			Picture* p = new Picture();
			p->input(file1);
			list.push_back(p);
		}
		else {
			Sculpture* s = new Sculpture();
			s->input(file1);
			list.push_back(s);
		}
	}
	/*2.??????????? ? ????????? ???? ?????? ???? ??????????, ???????????? ?? ???????*/
	sort(list.begin(), list.end(), [](Exhibit* a, Exhibit* b) {
		return a->GetAuthor() < b->GetAuthor();
		});
	ofstream file2("Text2.txt");
	for (auto Exhibit : list) {
		Exhibit->output(file2);
		file2 << "\n";/*??????????? ?? ??????? ????????? ? list ?? ?????????? ??? ????? output, ???? ???????? ???? ??? ???????? ? ???? Text2.txt.*/
	}
	/*3.??????? ??? ???? ???????, ?????????? ????????? ????????? ??????????*/
	string is_author;
	cout << "Enter author name: ";
	cin >> is_author;
	int marble_sculptures = 0;
	for (auto Exhibit : list) {
		if (Exhibit->GetAuthor() == is_author) {
			Exhibit->output(cout);
			cout << endl;
			if(dynamic_cast<Sculpture*>(Exhibit)!=nullptr && dynamic_cast<Sculpture*>(Exhibit)->getMaterial() == "marble") {
				marble_sculptures++;
			}
		}
	}
}