#include <iostream>
#include <vector>
#include <algorithm>
#include <fstream>
/*????????? ??? «?????????»( ???????,?????  ) ?? ??????? ??? ????? ???? 
«????????»(?????? , ????? ?????????????) ?? «??????????» (????? ?????).
????????? ??? «???????»(???, ?????, ????? ?????????). ? ?????????? ????? ?????? 
???? ??? n ?????????. ??????? ?? ???? ? ????? ? ??????????? ? ????????? ???? 
?????? ???? ?????????, ???????????? ?? ????????? ?? ????????.  ? ?????
????????? ???? ??????? ??? ?????????? ????????? ?? ?????? «????» ?? ?? ?????????.*/
using namespace std;
class Shparhalka {
protected:
    string subject;
    int number;
public:
    virtual void input(istream& is) {
        is >> subject >> number;
    }
    virtual void output(ostream& os) {
        os << "Subject: " << subject << "\nNumber: " << number;
    }
    bool operator<(const Shparhalka& other) const {
        if (subject != other.subject) {
            return subject < other.subject;
        }
        else {
            return number < other.number;
        }
    }
};
class Paperova : public Shparhalka {
private:
    string size;
    string location;
public:
    void input(istream& is) {
        Shparhalka::input(is);
        is >> size >> location;
    }
    void output(ostream& os) {
        Shparhalka::output(os);
        os << "\nSize: " << size << "\nLocation: " << location;
    }
};
class Electronic : public Shparhalka {
private:
    string media_name;

public:
    void input(istream& is) {
        Shparhalka::input(is);
        is >> media_name;
    }
    void output(ostream& os) {
        Shparhalka::output(os);
        os << "\nMedia name: " << media_name;
    }
};
class Student {
private:
    string name;
    string group;
    vector<Shparhalka*> shparhalki;

public:
    void input(istream& is) {
        is >> name >> group;
        int n;
        is >> n;
        shparhalki.resize(n);
        for (int i = 0; i < n; ++i) {
            string type;
            is >> type;
            if (type == "paperova") {
                shparhalki[i] = new Paperova();
            }
            else {
                shparhalki[i] = new Electronic();
            }
            shparhalki[i]->input(is);
        }
    }
    void output(ostream& os) {
        os << "Name: " << name << "\nGroup: " << group << "\nShparhalki:\n";
        for (int i = 0; i < shparhalki.size(); i++) {
            shparhalki[i]->output(os);
            os << endl;
        }
    }
    ~Student() {
        for (auto shparhalka : shparhalki) {
            delete shparhalka;
        }
    }
    const vector<Shparhalka*>& getShparhalki() const {
        return shparhalki;
    }
};

int main() {
    vector<Student> students;
    ifstream file1("input.txt");
    int n;
    file1 >> n;
    students.resize(n);/*?????? ?????? ??????? ? ?????? students ?? n ?????????*/
    for (int i = 0; i < n; i++) {
        students[i].input(file1);
    }
    file1.close();
    // Sort shparhalki by subject and number
    vector<Shparhalka*> all_shparhalki;
    for (const auto& student : students) {
        const auto& shparhalki = student.getShparhalki();
        all_shparhalki.insert/*???????? ???????? ????? ??????? ? ?????? (vector) ?? ?????? ???????*/(all_shparhalki.end(), shparhalki.begin(), shparhalki.end());
    }
    sort(all_shparhalki.begin(), all_shparhalki.end());
    ofstream file2("output.txt");
    for (auto& student : students) {
        student.output(file2);
        file2 << "\n";
    }
    file2 << "\nAll shparhalki sorted by subject and number:\n";
    for (const auto& shparhalka : all_shparhalki) {
        shparhalka->output(file2);
        file2 << "\n";
    }
    file2.close();

    return 0;

